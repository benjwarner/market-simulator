package org.tools4j.fix

/**
 * User: ben
 * Date: 23/8/17
 * Time: 7:08 AM
 */
enum class FixMessageType(val code: String) {
    Heartbeat("0"),
    TestRequest("1"),
    ResendRequest("2"),
    Reject("3"),
    SequenceReset("4"),
    Logout("5"),
    IOI("6"),
    Advertisement("7"),
    ExecutionReport("8"),
    OrderCancelReject("9"),
    Logon("A"),
    News("B"),
    Email("C"),
    NewOrderSingle("D"),
    NewOrderList("E"),
    OrderCancelRequest("F"),
    OrderCancelReplaceRequest("G"),
    OrderStatusRequest("H"),
    AllocationInstruction("J"),
    ListCancelRequest("K"),
    ListExecute("L"),
    ListStatusRequest("M"),
    ListStatus("N"),
    AllocationInstructionAck("P"),
    DontKnowTradeDK("Q"),
    QuoteRequest("R"),
    Quote("S"),
    SettlementInstructions("T"),
    MarketDataRequest("V"),
    MarketDataSnapshotFullRefresh("W"),
    MarketDataIncrementalRefresh("X"),
    MarketDataRequestReject("Y"),
    QuoteCancel("Z"),
    QuoteStatusRequest("a"),
    MassQuoteAcknowledgement("b"),
    SecurityDefinitionRequest("c"),
    SecurityDefinition("d"),
    SecurityStatusRequest("e"),
    SecurityStatus("f"),
    TradingSessionStatusRequest("g"),
    TradingSessionStatus("h"),
    MassQuote("i"),
    BusinessMessageReject("j"),
    BidRequest("k"),
    BidResponse("l"),
    ListStrikePrice("m"),
    RegistrationInstructions("o"),
    RegistrationInstructionsResponse("p"),
    OrderMassCancelRequest("q"),
    OrderMassCancelReport("r"),
    NewOrderCross("s"),
    CrossOrderCancelReplaceRequest("t"),
    CrossOrderCancelRequest("u"),
    SecurityTypeRequest("v"),
    SecurityTypes("w"),
    SecurityListRequest("x"),
    SecurityList("y"),
    DerivativeSecurityListRequest("z"),
    DerivativeSecurityList("AA"),
    NewOrderMultileg("AB"),
    MultilegOrderCancelReplace("AC"),
    TradeCaptureReportRequest("AD"),
    TradeCaptureReport("AE"),
    OrderMassStatusRequest("AF"),
    QuoteRequestReject("AG"),
    RFQRequest("AH"),
    QuoteStatusReport("AI"),
    QuoteResponse("AJ"),
    Confirmation("AK"),
    PositionMaintenanceRequest("AL"),
    PositionMaintenanceReport("AM"),
    RequestForPositions("AN"),
    RequestForPositionsAck("AO"),
    PositionReport("AP"),
    TradeCaptureReportRequestAck("AQ"),
    TradeCaptureReportAck("AR"),
    AllocationReport("AS"),
    AllocationReportAck("AT"),
    Confirmation_Ack("AU"),
    SettlementInstructionRequest("AV"),
    AssignmentReport("AW"),
    CollateralRequest("AX"),
    CollateralAssignment("AY"),
    CollateralResponse("AZ"),
    CollateralReport("BA"),
    CollateralInquiry("BB"),
    NetworkCounterpartySystemStatusRequest("BC"),
    NetworkCounterpartySystemStatusResponse("BD"),
    UserRequest("BE"),
    UserResponse("BF"),
    CollateralInquiryAck("BG"),
    ConfirmationRequest("BH"),
    ContraryIntentionReport("BO"),
    SecurityDefinitionUpdateReport("BP"),
    SecurityListUpdateReport("BK"),
    AdjustedPositionReport("BL"),
    AllocationInstructionAlert("BM"),
    ExecutionAcknowledgement("BN"),
    TradingSessionList("BJ"),
    TradingSessionListRequest("BI"),
    SettlementObligationReport("BQ"),
    DerivativeSecurityListUpdateReport("BR"),
    TradingSessionListUpdateReport("BS"),
    MarketDefinitionRequest("BT"),
    MarketDefinition("BU"),
    MarketDefinitionUpdateReport("BV"),
    UserNotification("CB"),
    OrderMassActionReport("BZ"),
    OrderMassActionRequest("CA"),
    ApplicationMessageRequest("BW"),
    ApplicationMessageRequestAck("BX"),
    ApplicationMessageReport("BY"),
    StreamAssignmentRequest("CC"),
    StreamAssignmentReport("CD"),
    StreamAssignmentReportACK("CE"),
    PartyDetailsListRequest("CE"),
    PartyDetailsListReport("CE");

    companion object{
        val CODE_TO_ENUM_MAP: Map<String, FixMessageType> by lazy {
            val map = HashMap<String, FixMessageType>()
            FixMessageType.values().forEach { map.put(it.code, it) }
            map
        }

        fun forCode(code: String): FixMessageType {
            return CODE_TO_ENUM_MAP[code]!!
        }

        fun codeExists(code: String): Boolean {
            return CODE_TO_ENUM_MAP.containsKey(code)
        }
    }
}
