import java.text.SimpleDateFormat

buildscript {
    ext.kotlin_version = '1.2.30'

    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

group 'org.tools4j.fixgrep'
version "1.0"

def versionPropsFile = file('version.properties')
def buildVersion
def fullVersion
if (versionPropsFile.canRead()) {
    def Properties versionProps = new Properties()
    versionProps.load(new FileInputStream(versionPropsFile))
    buildVersion = versionProps['BUILD_VERSION'].toInteger()
    fullVersion=version+"."+buildVersion
} else {
    throw new FileNotFoundException("Could not read version.properties!")
}

apply plugin: 'groovy'
apply plugin: 'java'
apply plugin: 'kotlin'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
    maven { url "http://dl.bintray.com/jetbrains/spek" }
}

sourceSets {
    perf {
        groovy {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir 'src/perf/groovy'
        }
        resources.srcDir file('src/perf/resources')
    }
}

dependencies {
    compile project(':shared')
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    compile "io.github.microutils:kotlin-logging:1.4.9"
    compile 'ch.qos.logback:logback-classic:1.2.3'
    compile 'net.sf.jopt-simple:jopt-simple:5.0.4'
    compile "com.google.guava:guava-collections:r03"

    testCompile "org.codehaus.groovy:groovy-all:2.4.1"
    testCompile 'junit:junit:4.12'
    testCompile "org.spockframework:spock-core:1.0-groovy-2.4"

    perfCompile "org.codehaus.groovy:groovy-all:2.4.1"
    perfCompile 'junit:junit:4.12'
    perfCompile "org.spockframework:spock-core:1.0-groovy-2.4"
    perfCompile project(':shared')
}

configurations {
    perfCompile.extendsFrom testCompile
    perfRuntime.extendsFrom testRuntime
}

task versionTxt()  {
    doLast {
        final File versionFile = new File("build/dist/files/meta/version.txt")
        versionFile.parentFile.mkdirs()
        versionFile.text = """Version: $fullVersion
Buildtime: ${new SimpleDateFormat("dd-MM-yyyy HH:mm:ss").format(new Date())}
Application-name: fixgrep
"""
    }
}

ext.autoIncrementBuildNumber = {
    if (versionPropsFile.canRead()) {
        def Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(versionPropsFile))
        buildVersion = versionProps['BUILD_VERSION'].toInteger() + 1
        versionProps['BUILD_VERSION'] = buildVersion.toString()
        versionProps.store(versionPropsFile.newWriter(), null)
        fullVersion=version+"."+buildVersion
        println "Updated buildVersion to: $buildVersion"
        println "Updated fullVersion to: $fullVersion"
    } else {
        throw new FileNotFoundException("Could not read version.properties!")
    }
}

task perf(type: Test, description: 'Runs the perf tests.', group: 'Verification') {
    testClassesDirs = sourceSets.perf.output.classesDirs
    classpath = sourceSets.perf.runtimeClasspath
    outputs.upToDateWhen { false }
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

task copyDependenciesToLib(type: Copy) {
    into "$buildDir/libs"
    from configurations.runtime
}

task copyAdditionalResources(type: Copy) {
    from 'src/main/dist'
    into 'build/dist/files'
}

task copyPerfResults(type: Copy) {
    from 'build/reports/tests/perf/benchmarks.txt'
    into 'build/dist/files/meta'
}

task copyFromLibsToDistLib(type: Copy) {
    from "$buildDir/libs"
    into "$buildDir/dist/files/lib"
}

task createHtmlManPage(type:JavaExec) {
    main = "org.tools4j.fixgrep.FixGrepMain"
    classpath = sourceSets.main.runtimeClasspath
    args = ["--man", "--html", "page", "--to-file", "../docs/index.html"]
    environment("FIXGREP_VERSION", "$fullVersion")
}

task createTextManPage(type:JavaExec) {
    main = "org.tools4j.fixgrep.FixGrepMain"
    classpath = sourceSets.main.runtimeClasspath
    args = ["--man", "page", "--to-file", "$buildDir/dist/files/man.txt"]
}

task deleteAnyOldZipFiles(type: Delete) {
    delete fileTree('build/dist/zip') {
        include '**/*.zip'
    }
}

task createZip(type: Zip) {
    dependsOn build
    dependsOn test
    dependsOn perf
    dependsOn copyAdditionalResources
    dependsOn copyPerfResults
    dependsOn copyFromLibsToDistLib
    dependsOn createHtmlManPage
    dependsOn createTextManPage
    dependsOn versionTxt
    dependsOn deleteAnyOldZipFiles

    from 'build/dist/files'
    include '*'
    include '*/*'
    archiveName "fixgrep-UNKNOWN.zip"
    destinationDir(file('build/dist/zip/'))
}

task copyZipIntoReleasesDir(type: Copy) {
    dependsOn createZip
    from 'build/dist/zip/'
    into 'releases/'
    include '*.zip'
}

/*
Calling release will 'dynamically' set the version
 */
task release {
    finalizedBy copyZipIntoReleasesDir
    doLast {
        createZip.archiveName = "fixgrep-${fullVersion}.zip"
    }
}

task buildZip {
    group 'build'
    dependsOn "createZip"

    description 'Produces the Tabular zip file.'
    doLast {
        println 'Done!'
    }
}

task copyZipToDistDirectory(type: Copy) {
    dependsOn createZip
    from 'build/dist/zip/'
    into 'dist/'
}


build.dependsOn(copyDependenciesToLib)

gradle.taskGraph.whenReady {taskGraph ->
    if (taskGraph.hasTask(release)) {  /* when run debug task */
        println "Detected that we are running release"
        autoIncrementBuildNumber()
    }
}