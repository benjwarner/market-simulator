buildscript {
    ext.kotlin_version = '1.2.30'

    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

group 'org.tools4j.fixgrep'
version '1.0-SNAPSHOT'

//buildscript {
//    dependencies {
//        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.0'
//    }
//}

apply plugin: 'groovy'
apply plugin: 'java'
apply plugin: 'kotlin'
//apply plugin: 'org.junit.platform.gradle.plugin'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
    maven { url "http://dl.bintray.com/jetbrains/spek" }
}

//junitPlatform {
//    filters {
//        engines {
//            include 'spek'
//        }
//    }
//}

dependencies {
    compile project(':shared')
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    compile "io.github.microutils:kotlin-logging:1.4.9"
    compile 'ch.qos.logback:logback-classic:1.2.3'
//    compile 'com.typesafe:config:1.3.2'
    compile 'net.sf.jopt-simple:jopt-simple:5.0.4'
    compile "com.google.guava:guava-collections:r03"
   // compile 'org.slf4j:slf4j-simple:1.7.5'

    testCompile "org.codehaus.groovy:groovy-all:2.4.1"
    testCompile 'junit:junit:4.12'
    testCompile "org.spockframework:spock-core:1.0-groovy-2.4"
    testCompile "org.tools4j:groovy-tables:1.3"
    testCompile "org.hamcrest:hamcrest-core:1.3" // only necessary if Hamcrest matchers are used

//    testRuntime "org.objenesis:objenesis:2.1"    // allows mocking of classes without default constructor (together with CGLIB)
//    testRuntime "cglib:cglib-nodep:3.1"          // allows mocking of classes (in addition to interfaces)
//    testCompile 'org.jetbrains.spek:spek-api:1.1.5'
//    testRuntime 'org.jetbrains.spek:spek-junit-platform-engine:1.1.5'
//    testCompile 'org.assertj:assertj-core:3.9.0'
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

task copyDependenciesToLib(type: Copy) {
    into "$buildDir/libs"
    from configurations.runtime
}

task copyAdditionalResources(type: Copy) {
    from 'src/main/dist'
    into 'build/dist/files'
}

task copyFromLibsToDistLib(type: Copy) {
    from "$buildDir/libs"
    into "$buildDir/dist/files/lib"
}

task createZip(type: Zip) {
    from 'build/dist/files'
    include '*'
    include '*/*'
    archiveName "fixgrep-${version}.zip"
    destinationDir(file('build/dist/zip/'))
}


task buildZip {
    group 'build'
    description 'Produces the Tabular zip file.'
    doLast {
        println 'Done!'
    }
}

task copyZipToDistDirectory(type: Copy) {
    from 'build/dist/zip/'
    into 'dist/'
}


build.dependsOn(copyDependenciesToLib)
copyFromLibsToDistLib
buildZip.dependsOn createZip
createZip.dependsOn assemble
createZip.dependsOn copyAdditionalResources
createZip.dependsOn copyFromLibsToDistLib
copyZipToDistDirectory.dependsOn createZip