buildscript {
    ext.kotlin_version = '1.2.30'

    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

// import the script which runs the version generation
apply from: 'git-versioner.gradle'

group 'org.tools4j.fixgrep'
version "$gitVersionName"

apply plugin: 'groovy'
apply plugin: 'java'
apply plugin: 'kotlin'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
    maven { url "http://dl.bintray.com/jetbrains/spek" }
}

dependencies {
    compile project(':shared')
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    compile "io.github.microutils:kotlin-logging:1.4.9"
    compile 'ch.qos.logback:logback-classic:1.2.3'
    compile 'net.sf.jopt-simple:jopt-simple:5.0.4'
    compile "com.google.guava:guava-collections:r03"

    testCompile "org.codehaus.groovy:groovy-all:2.4.1"
    testCompile 'junit:junit:4.12'
    testCompile "org.spockframework:spock-core:1.0-groovy-2.4"
    testCompile "org.tools4j:groovy-tables:1.3"
    testCompile "org.hamcrest:hamcrest-core:1.3" // only necessary if Hamcrest matchers are used
}


// Optional: configure the versioner
/*ext.gitVersioner = [
        defaultBranch           : "develop",  // default "master"
        yearFactor              : 1200,       // default "1000", increasing every 8.57h
        snapshotEnabled         : false,      // default false, the "-SNAPSHOT" postfix
        localChangesCountEnabled: false       // default false, the (<commitCount>) before -SNAPSHOT
]*/

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

task copyDependenciesToLib(type: Copy) {
    into "$buildDir/libs"
    from configurations.runtime
}

task copyAdditionalResources(type: Copy) {
    from 'src/main/dist'
    into 'build/dist/files'
}

task copyFromLibsToDistLib(type: Copy) {
    from "$buildDir/libs"
    into "$buildDir/dist/files/lib"
}

task createHtmlManPage(type:JavaExec) {
    main = "org.tools4j.fixgrep.FixGrepMain"
    classpath = sourceSets.main.runtimeClasspath
    args = ["--man", "--html", "page", "--to-file", "../index.html"]
    environment("FIXGREP_VERSION", "$gitVersionName")
}

task createTextManPage(type:JavaExec) {
    main = "org.tools4j.fixgrep.FixGrepMain"
    classpath = sourceSets.main.runtimeClasspath
    args = ["--man", "page", "--to-file", "$buildDir/dist/files/man.txt"]
}

task createZip(type: Zip) {
    dependsOn assemble
    dependsOn copyAdditionalResources
    dependsOn copyFromLibsToDistLib
    dependsOn createHtmlManPage
    dependsOn createTextManPage

    from 'build/dist/files'
    include '*'
    include '*/*'
    archiveName "fixgrep-${version}.zip"
    destinationDir(file('build/dist/zip/'))
}


task buildZip {
    group 'build'
    dependsOn "createZip"

    description 'Produces the Tabular zip file.'
    doLast {
        println 'Done!'
    }
}

task copyZipToDistDirectory(type: Copy) {
    dependsOn createZip
    from 'build/dist/zip/'
    into 'dist/'
}


build.dependsOn(copyDependenciesToLib)